//Give this JavaScript code:

var data = { 
  steps: 0,
  walk: function(steps) {
    this.steps += steps;
  }  
}

var Person = function() {}
Person.prototype = data;

var tom = new Person();
var jerry = new Person();

console.log(tom.__proto__ === jerry.__proto__); // true

console.log(tom.steps); // 0
console.log(jerry.steps); // 0

tom.walk(10);

console.log(tom.steps); // 10
console.log(jerry.steps); // 0

//The first console.log shows that both the objects, tom and jerry,
//share the prototype. The values for steps for each are the same as well,
//initially. But, when the walk function sets the steps, it changed only for
//the object tom and not for the object jerry. Why is that? Explain.

Answer: In JavaScript, gets are deeper whereas sets are shallow.
Both tom and jerry are objects of type Person whose prototype is same. When you get the steps of an object of Person (say tom), the steps are fetched from the deeper layer i.e from the prototype. Where as when you set the steps for the object it is set only in the top level and is not propagated to the prototype.

tom.walk(10) : is a shallow operation as said above, which does not change the prototype.

Therefore the above operation does not effect the steps of jerry.
