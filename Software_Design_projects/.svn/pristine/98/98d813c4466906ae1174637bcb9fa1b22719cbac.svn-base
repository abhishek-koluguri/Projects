package application;

import org.junit.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class FibonacciRecursiveTest extends FibonacciNumberTest {


    public FibonacciRecursive getInstance(){

        return new FibonacciRecursive();
    }

    @Test
    public void fibonacciRecursiveIsRecursive()
    {
        FibonacciRecursive fibonacciRecursive = new FibonacciRecursive();

        FibonacciRecursive fibonacciRecursive1 = Mockito.spy(fibonacciRecursive);

        fibonacciRecursive1.fibonacciValueAtAPosition(5);

        verify(fibonacciRecursive1, times(1)).fibonacciValueAtAPosition(5);
        verify(fibonacciRecursive1, times(1)).fibonacciValueAtAPosition(4);
        verify(fibonacciRecursive1, times(2)).fibonacciValueAtAPosition(3);
        verify(fibonacciRecursive1, times(3)).fibonacciValueAtAPosition(2);
        verify(fibonacciRecursive1, times(5)).fibonacciValueAtAPosition(1);
        verify(fibonacciRecursive1, times(3)).fibonacciValueAtAPosition(0);
    }

    @Test
    public void fibonacciRecursiveIsNotRecursiveForPositionZero()
    {
        FibonacciRecursive fibonacciRecursive = new FibonacciRecursive();

        FibonacciRecursive fibonacciRecursive1 = Mockito.spy(fibonacciRecursive);

        fibonacciRecursive1.fibonacciValueAtAPosition(0);

        verify(fibonacciRecursive1, times(1)).fibonacciValueAtAPosition(0);
        verify(fibonacciRecursive1, times(0)).fibonacciValueAtAPosition(1);
    }

    @Test
    public void fibonacciRecursiveIsNotRecursiveForPositionOne()
    {
        FibonacciRecursive fibonacciRecursive = new FibonacciRecursive();

        FibonacciRecursive fibonacciRecursive1 = Mockito.spy(fibonacciRecursive);

        fibonacciRecursive1.fibonacciValueAtAPosition(1);

        verify(fibonacciRecursive1, times(0)).fibonacciValueAtAPosition(0);
        verify(fibonacciRecursive1, times(1)).fibonacciValueAtAPosition(1);

    }
}