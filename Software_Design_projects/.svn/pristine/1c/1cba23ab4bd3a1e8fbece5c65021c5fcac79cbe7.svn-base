package report;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class WeatherReportTest {

    public WeatherReport weatherReport;
    public WeatherData arizona, mumbai, missouri, mississippi, perth, gotham, dreamland, jurasicpark;

    public List<WeatherData> cityData;
    public List<WeatherData> expected;

    Exception e = new Exception("");
    Exception error = new Exception("Error: Not found city");

    @Before
    public void setUp(){

        weatherReport = new WeatherReport();

        mumbai = new WeatherData("Mumbai", 30, "Hot", e);
        perth = new WeatherData("Perth", 20, "Sunny", e);
        missouri = new WeatherData("Missouri", 10, "Cool", e);
        mississippi = new WeatherData("Mississippi", 10, "Cool", e);
        arizona = new WeatherData("Arizona", 30, "Hot", e);
        gotham = new WeatherData("Gotham", 20, "", error);
        dreamland = new WeatherData("Dreamland", 30, "", error);
        jurasicpark = new WeatherData("Jurasicpark", 25, "", error);

        cityData = Arrays.asList(mumbai, perth, missouri, mississippi, arizona);
        expected = Arrays.asList(arizona, mississippi, missouri, mumbai, perth);
    }

    @Test
    public void canary(){

        assertTrue(true);
    }


    @Test
    public void sortByCity(){

        List<WeatherData> result = weatherReport.sortByCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void sortEmptyList(){

        expected = Arrays.asList();
        cityData = Arrays.asList();
        List<WeatherData> result = weatherReport.sortByCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void sortListContainingCitiesWithSameInitial(){

        List<WeatherData> result = weatherReport.sortByCity(cityData);

        assertEquals(expected, result);
    }


    @Test
    public void sortListWithOnlyOneCity(){

        List<WeatherData> cityData = Arrays.asList(arizona);
        expected = Arrays.asList(arizona);
        List<WeatherData> result = weatherReport.sortByCity(cityData);

        assertEquals(expected, result);
    }


    @Test
    public void findColdestCity(){

        cityData = Arrays.asList(mumbai, perth, missouri, arizona);
        List<String> expected = Arrays.asList("Missouri");

        List<String> result = weatherReport.findColdestCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void findGetColdestCityForEmptyList(){

        List<String> expected = Arrays.asList();
        cityData = Arrays.asList();
        List<String> result = weatherReport.findColdestCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void findColdestCityForOneCity(){

        cityData = Arrays.asList(mumbai);
        List<String> expected = Arrays.asList("Mumbai");

        List<String> result = weatherReport.findColdestCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void findColdestCitiesForTwoColdestCities(){

        List<String> expected = Arrays.asList("Missouri", "Mississippi");

        List<String> result = weatherReport.findColdestCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void findHottestCity(){

        cityData = Arrays.asList(mumbai, perth, missouri, mississippi);
        List<String> expected = Arrays.asList("Mumbai");

        List<String> result = weatherReport.findHottestCity(cityData);

        assertEquals(expected, result);
    }


    @Test
    public void findHottestCityForEmptyList(){

        List<String> expected = Arrays.asList();
        cityData = Arrays.asList();
        List<String> result = weatherReport.findHottestCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void findHottestCityForOneCity(){

        cityData = Arrays.asList(mumbai);
        List<String> expected = Arrays.asList("Mumbai");

        List<String> result = weatherReport.findHottestCity(cityData);

        assertEquals(expected, result);
    }

    @Test
    public void findHottestCitiesForTwoHottestCitiesInAList(){

        List<String> expected = Arrays.asList("Mumbai", "Arizona");

        List<String> result = weatherReport.findHottestCity(cityData);

        assertEquals(expected, result);
    }


    @Test
    public void getWholeWeatherReport(){

        List<String> coldestCitiesList = Arrays.asList("Missouri", "Mississippi");
        List<String> hottestCitiesList = Arrays.asList("Mumbai", "Arizona");
        List<String> cityList = Arrays.asList("Mumbai", "Perth", "Missouri", "Mississippi", "Arizona");
        List<WeatherData> citiesWithError = Arrays.asList();

        WeatherService weatherService = Mockito.mock(WeatherService.class);

        when(weatherService.getCityData(mumbai.getCity())).thenReturn(mumbai);
        when(weatherService.getCityData(perth.getCity())).thenReturn(perth);
        when(weatherService.getCityData(missouri.getCity())).thenReturn(missouri);
        when(weatherService.getCityData(mississippi.getCity())).thenReturn(mississippi);
        when(weatherService.getCityData(arizona.getCity())).thenReturn(arizona);

        weatherReport.setWeatherService(weatherService);

        ReturnWeatherReport returnWeatherReport = weatherReport.getWeatherReport(cityList);

        assertEquals(expected, returnWeatherReport.sortedByCity);
        assertEquals(coldestCitiesList, returnWeatherReport.coldestCitiesList);
        assertEquals(hottestCitiesList, returnWeatherReport.hottestCitiesList);
        assertEquals(citiesWithError, returnWeatherReport.citiesWithError);
    }


    @Test
    public void getWholeWeatherReportWhenOneCityFails(){

        List<String> coldestCitiesList = Arrays.asList("Missouri");
        List<String> hottestCitiesList = Arrays.asList("Mumbai");
        List<String> cityList = Arrays.asList("Mumbai", "Perth", "Missouri", "Gotham");
        List<WeatherData> citiesWithError = Arrays.asList(gotham);
        expected = Arrays.asList(gotham, missouri, mumbai, perth);

        WeatherService weatherService = Mockito.mock(WeatherService.class);

        when(weatherService.getCityData(mumbai.getCity())).thenReturn(mumbai);
        when(weatherService.getCityData(perth.getCity())).thenReturn(perth);
        when(weatherService.getCityData(missouri.getCity())).thenReturn(missouri);
        when(weatherService.getCityData(gotham.getCity())).thenReturn(gotham);

        weatherReport.setWeatherService(weatherService);

        ReturnWeatherReport returnWeatherReport = weatherReport.getWeatherReport(cityList);

        assertEquals(expected, returnWeatherReport.sortedByCity);
        assertEquals(coldestCitiesList, returnWeatherReport.coldestCitiesList);
        assertEquals(hottestCitiesList, returnWeatherReport.hottestCitiesList);
        assertEquals(citiesWithError, returnWeatherReport.citiesWithError);
    }

    @Test
    public void getWholeWeatherReportWhenAllCitiesFail(){

        List<String> coldestCitiesList = Arrays.asList("Gotham");
        List<String> hottestCitiesList = Arrays.asList("Dreamland");
        List<String> cityList = Arrays.asList("Gotham", "Dreamland", "Jurasicpark");
        List<WeatherData> citiesWithError = Arrays.asList(gotham, dreamland, jurasicpark);

        expected = Arrays.asList(dreamland, gotham, jurasicpark);

        WeatherService weatherService = Mockito.mock(WeatherService.class);

        when(weatherService.getCityData(gotham.getCity())).thenReturn(gotham);
        when(weatherService.getCityData(dreamland.getCity())).thenReturn(dreamland);
        when(weatherService.getCityData(jurasicpark.getCity())).thenReturn(jurasicpark);

        weatherReport.setWeatherService(weatherService);

        ReturnWeatherReport returnWeatherReport = weatherReport.getWeatherReport(cityList);

        assertEquals(expected, returnWeatherReport.sortedByCity);
        assertEquals(coldestCitiesList, returnWeatherReport.coldestCitiesList);
        assertEquals(hottestCitiesList, returnWeatherReport.hottestCitiesList);
        assertEquals(citiesWithError, returnWeatherReport.citiesWithError);
    }

    @Test
    public void getWholeWeatherReportWhenCityListIsEmpty(){

        List<String> coldestCitiesList = Arrays.asList();
        List<String> hottestCitiesList = Arrays.asList();
        List<String> cityList = Arrays.asList();
        List<WeatherData> citiesWithError = Arrays.asList();

        expected = Arrays.asList();

        ReturnWeatherReport returnWeatherReport = weatherReport.getWeatherReport(cityList);

        assertEquals(expected, returnWeatherReport.sortedByCity);
        assertEquals(coldestCitiesList, returnWeatherReport.coldestCitiesList);
        assertEquals(hottestCitiesList, returnWeatherReport.hottestCitiesList);
        assertEquals(citiesWithError, returnWeatherReport.citiesWithError);
    }

    @Test
    public void getWeatherDataForOneCity() throws IOException
    {

        URL url = new URL("http://api.openweathermap.org/data/2.5/weather?q=Houston,");
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.connect();


        JsonParser jasonParser = new JsonParser();
        JsonElement jsonElement = jasonParser.parse(new InputStreamReader((InputStream) request.getContent()));
        JsonObject jsonObject = jsonElement.getAsJsonObject();

        JsonArray weather = jsonObject.getAsJsonArray("weather");
        JsonObject weatherObject =  weather.getAsJsonArray().get(0).getAsJsonObject();
        String condition = weatherObject.get("main").toString();

        JsonElement temp = jsonObject.get("main");
        JsonObject temperatureObject =  temp.getAsJsonObject();
        double temperature = temperatureObject.get("temp").getAsDouble();

        JsonElement city = jsonObject.get("name");
        String cityName = city.toString();

        WeatherData cityData = new WeatherData(cityName, temperature, condition, e);
        request.disconnect();

        List<String> coldestCitiesList = Arrays.asList(cityName);
        List<String> hottestCitiesList = Arrays.asList(cityName);
        List<String> cityList = Arrays.asList(cityName);
        List<WeatherData> citiesWithError = Arrays.asList();
        expected = Arrays.asList(cityData);

        WeatherService weatherService = Mockito.mock(WeatherService.class);

        when(weatherService.getCityData(cityData.getCity())).thenReturn(cityData);

        weatherReport.setWeatherService(weatherService);

        ReturnWeatherReport returnWeatherReport = weatherReport.getWeatherReport(cityList);

        assertEquals(expected, returnWeatherReport.sortedByCity);
        assertEquals(coldestCitiesList, returnWeatherReport.coldestCitiesList);
        assertEquals(hottestCitiesList, returnWeatherReport.hottestCitiesList);
        assertEquals(citiesWithError, returnWeatherReport.citiesWithError);
    }
}