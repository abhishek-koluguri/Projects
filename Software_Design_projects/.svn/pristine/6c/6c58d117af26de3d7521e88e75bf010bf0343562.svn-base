HW3 Due 11:59PM Friday May 1st 

1. Suppose you're given three different drones (Drone1, Drone2, Drone3) - 
each drone represents a particular model of drone, but none of them share a 
common or consistent API or interface. You are asked to design a TrackDrone in 
a way that it can uniformly use all these three without changing any of them. 
What design pattern is useful to achieve this goal?

- As classes are compatible and only interfaces are incompatible, we can use the Adapter pattern here.  

2. What classes would participate in the use of the above named pattern?

- The classes we are going to use are : Drone1, Drone2, Drone3, TrackDrone, DroneAdapter.

3. Why would you choose to use this pattern?

- We will be using Adapter Pattern because here classes are compatible but only interfaces are incompatible. 
  So we can use adapter pattern to make Drone2, Drone3 adapt to interface of Drone1 and use all the 3 Drone model in TrackDrone without changing any of those.

4. Are there any variations of this pattern? If so, what are those and discuss why you'd choose one over the other.
- There are two variations in this pattern, Class Pattern and Object Pattern. 
  We chose Object Pattern over Class Pattern because Object Pattern has more advantages than Class Pattern like:
	Object Pattern allows single adapter(DroneAdapter) to work with many adaptees (Drone2, Drone3).
	Can add functionality to all adaptees.

